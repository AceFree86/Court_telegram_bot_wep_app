import asyncio
import logging

from aiogram import Bot, types, Dispatcher
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Command, Text
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.utils import executor

import keyboards as keyboard
import servis
import string_container as str_container
from config import TOKEN
from data_base import Database

logging.basicConfig(level=logging.INFO)


async def on_startup(_):
    servis.sql_start()


bot = Bot(token=TOKEN, parse_mode=types.ParseMode.HTML)
dp = Dispatcher(bot=bot, storage=MemoryStorage())

db = Database("subscriber.db")


class GetCase(StatesGroup):
    case_pr = State()
    case_uz = State()
    case_appel = State()
    case_vb = State()


class RegUser(StatesGroup):
    user_id = State()
    name = State()


@dp.message_handler(commands=["start", "help"])
async def start(message: types.Message):
    if message.chat.type == "private":
        if not db.user_exists(message.from_user.id):
            db.add_user(message.from_user.id, message.from_user.first_name)
        await message.answer("üëã–î–æ–±—Ä–æ–≥–æ –¥–Ω—è {0.first_name}!".format(message.from_user))
        await asyncio.sleep(1)
        with open("foto/PRC.jpg", "rb") as foto:
            await message.answer_photo(foto, str_container.opus_bot)
            await asyncio.sleep(3)
            await message.answer("{0}".format(str_container.instruction), reply_markup=keyboard.create_main_markup())


@dp.message_handler(commands=['list'])
async def check(message: types.Message):
    await servis.aql_read(message)


@dp.message_handler(Command('pr') | Text(equals=['üìÖ–î–∞—Ç–∞ –∑–∞—Å—ñ–¥–∞–Ω–Ω—è']))
@dp.message_handler(Command('appel') | Text(equals=['‚öñÔ∏è–ó–∞–∫–∞—Ä–ø–∞—Ç—Å—å–∫–∏–π –∞–ø–µ–ª—è—Ü—ñ–π–Ω–∏–π —Å—É–¥']))
@dp.message_handler(Command('uz') | Text(equals=['‚öñÔ∏è–£–∂–≥–æ—Ä–æ–¥—Å—å–∫–∏–π –º—ñ—Å—å–∫—Ä–∞–π–æ–Ω–Ω–∏–π —Å—É–¥']))
@dp.message_handler(Command('vb') | Text(equals=['‚öñÔ∏è–í–µ–ª–∏–∫–æ–±–µ—Ä–µ–∑–Ω—è–Ω—Å—å–∫–∏–π —Ä–∞–π–æ–Ω–Ω–∏–π —Å—É–¥']))
async def commands_handler(message: types.Message):
    text = message.text
    option_index = None
    if text in ['üìÖ–î–∞—Ç–∞ –∑–∞—Å—ñ–¥–∞–Ω–Ω—è', '/pr']:
        option_index = 0
    elif text in ['‚öñÔ∏è–ó–∞–∫–∞—Ä–ø–∞—Ç—Å—å–∫–∏–π –∞–ø–µ–ª—è—Ü—ñ–π–Ω–∏–π —Å—É–¥', '/appel']:
        option_index = 1
    elif text in ['‚öñÔ∏è–£–∂–≥–æ—Ä–æ–¥—Å—å–∫–∏–π –º—ñ—Å—å–∫—Ä–∞–π–æ–Ω–Ω–∏–π —Å—É–¥', '/uz']:
        option_index = 2
    elif text in ['‚öñÔ∏è–í–µ–ª–∏–∫–æ–±–µ—Ä–µ–∑–Ω—è–Ω—Å—å–∫–∏–π —Ä–∞–π–æ–Ω–Ω–∏–π —Å—É–¥', '/vb']:
        option_index = 3

    if option_index is not None:
        option = str_container.search_btn[option_index]
        await message.answer(f"{message.from_user.first_name} {str_container.meeting_date}",
                             reply_markup=keyboard.create_search_markup(option["name"], option["name2"], option["url"]))


@dp.message_handler(content_types='web_app_data')
async def data(web_app_message):
    await servis.read_wep_app(web_app_message)


@dp.message_handler()
async def bot_message(message: types.Message):
    text = message.text

    if text == "üîô–ù–∞–∑–∞—Ç –≤ –º–µ–Ω—é":
        await message.answer("–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", reply_markup=keyboard.create_main_markup())

    elif text == "‚òéÔ∏è–ö–æ–Ω—Ç–∞–∫—Ç–Ω—ñ –¥–∞–Ω–Ω—ñ":
        name = "üó∫–ö–∞—Ä—Ç–∏ –ø—Ä–æ—ó–∑–¥—É"
        await message.answer("<u><b>{0.first_name} {1}".format(message.from_user, str_container.contact),
                             reply_markup=keyboard.create_markup(name))

    elif text == "üó∫–ö–∞—Ä—Ç–∏ –ø—Ä–æ—ó–∑–¥—É":
        await message.answer("–ö–∞—Ä—Ç–∏ –ø—Ä–æ—ó–∑–¥—É üöó. –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –Ω–∞ –∫–Ω–æ–ø–∫—É, —â–æ–± –ø–µ—Ä–µ–º—ñ—Å—Ç–∏—Ç–∏—Å—è –Ω–∞ –±–∞–∂–∞–Ω—É –∫–∞—Ä—Ç—É",
                             reply_markup=keyboard.create_btn_main_markup())

        with open("foto/perechin.jpg", "rb") as foto:
            name = "–ü–µ—Ä–µ–º—ñ—Å—Ç–∏—Ç–∏—Å—è –Ω–∞ Apple –ö–∞—Ä—Ç—É"
            url = "https://maps.apple.com/place?address=48.735389,22.476694&q"
            await message.answer_photo(foto, reply_markup=keyboard.create_empty_url_markup(name, url))

        with open("foto/perechin1.jpg", "rb") as foto:
            name = "–ü–µ—Ä–µ–º—ñ—Å—Ç–∏—Ç–∏—Å—è –Ω–∞ Google –ö–∞—Ä—Ç—É"
            url = "https://goo.gl/maps/sNThx2MEs5VCuy2z9"
            await message.answer_photo(foto, reply_markup=keyboard.create_empty_url_markup(name, url))

    elif text == "üì¢–û–≥–æ–ª–æ—à–µ–Ω–Ω—è –ø—Ä–æ –≤–∏–∫–ª–∏–∫":
        name = "–ü–µ—Ä–µ–º—ñ—Å—Ç–∏—Ç–∏—Å—è –≤ –û–≥–æ–ª–æ—à–µ–Ω–Ω—è"
        url = "https://pr.zk.court.gov.ua/sud0708/gromadyanam//"
        await message.answer("{0.first_name} {1}".format(message.from_user, str_container.notice),
                             reply_markup=keyboard.create_empty_url_markup(name, url))

    elif text == "üìÉ–ï–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∏–π –°—É–¥":
        with open("foto/electroniccourt.jpg", "rb") as foto:
            await message.answer_photo(foto,
                                       "{0.first_name} {1}".format(message.from_user, str_container.electronic_court),
                                       reply_markup=keyboard.create_app_markup())

    elif text == "üì≤–ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –æ—Ñ—ñ—Ü—ñ–π–Ω–∏–π –º–æ–±—ñ–ª—å–Ω–∏–π –¥–æ–¥–∞—Ç–æ–∫ —î–°—É–¥":
        await message.answer("{0}".format(str_container.court_app), reply_markup=keyboard.create_download_app_markup())

    elif text == "‚öñÔ∏è–Ü–Ω—à—ñ —Å—É–¥–∏":
        await message.answer("{0.first_name} {1}".format(message.from_user, str_container.list_court),
                             reply_markup=keyboard.create_court_list_markup())

    elif text == "üé´–ü–æ—à—É–∫ –∑–∞ –ü.–Ü.–ü. –∞–±–æ –Ω–æ–º–µ—Ä–æ–º —Å–ø—Ä–∞–≤–∏":
        name = "üîô_–ù–∞–∑–∞—Ç_"
        await message.answer("{0.first_name} {1}".format(message.from_user, str_container.input_instruction),
                             reply_markup=keyboard.create_back_markup(name))
        await GetCase.case_pr.set()

    elif text == "üé´–ü–æ—à—É–∫ –∑–∞ –ü.–Ü.–ü. –∞–±–æ –Ω–æ–º–µ—Ä–æ–º —Å–ø—Ä–∞–≤–∏.":
        name = "üîô_–ù–∞–∑–∞—Ç_"
        await message.answer("{0.first_name} {1}".format(message.from_user, str_container.input_instruction),
                             reply_markup=keyboard.create_back_markup(name))
        await GetCase.case_appel.set()

    elif text == "üé´–ü–æ—à—É–∫ –∑–∞ –ü.–Ü.–ü. –∞–±–æ –Ω–æ–º–µ—Ä–æ–º —Å–ø—Ä–∞–≤–∏..":
        name = "üîô_–ù–∞–∑–∞—Ç_"
        await message.answer("{0.first_name} {1}".format(message.from_user, str_container.input_instruction),
                             reply_markup=keyboard.create_back_markup(name))
        await GetCase.case_uz.set()

    elif text == "üé´–ü–æ—à—É–∫ –∑–∞ –ü.–Ü.–ü. –∞–±–æ –Ω–æ–º–µ—Ä–æ–º —Å–ø—Ä–∞–≤–∏...":
        name = "üîô_–ù–∞–∑–∞—Ç_"
        await message.answer("{0.first_name} {1}".format(message.from_user, str_container.input_instruction),
                             reply_markup=keyboard.create_back_markup(name))
        await GetCase.case_vb.set()

    elif text == "üì©–°–ø–æ–≤—ñ—â–µ–Ω–Ω—è":
        name = "/–≤—ñ–¥–º–æ–≤–∞"
        await message.answer("{0.first_name} –≤ —Ü—å–æ–º—É —Ä–æ–∑–¥—ñ–ª—ñ –º–æ–∂–Ω–∞ —Å–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏—Å—è —Å–µ—Ä–≤—ñ—Å–æ–º *<b>"
                             "–°–ø–æ–≤—ñ—â–µ–Ω–Ω—è</b>*.\n–°—É—Ç—å —Å–µ—Ä–≤—ñ—Å—É –ø—Ä–æ—Å—Ç–∞, –í–∏ –æ—Ç—Ä–∏–º–∞—î—Ç–µüì© —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø—Ä–æ –¥–∞—Ç—É, —á–∞—Å "
                             "—Å—É–¥–æ–≤–æ–≥–æ –∑–∞—Å—ñ–¥–∞–Ω–Ω—è.\n\n–©–æ–± –ø—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—è‚úçüèª –Ω–∞ —Å–µ—Ä–≤—ñ—Å –í–∞–º –ø–æ—Ç—Ä—ñ–±–Ω–æ –Ω–∞–±—Ä–∞—Ç–∏‚å® "
                             "*<b>—Ç–∞–∫</b>* —ñ –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏üì• —Ç–∞ —Å–ª—ñ–¥—É–≤–∞—Ç–∏üëâ –ø–æ–¥–∞–ª—å—à–∏–º —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—è–º."
                             "\n\n–©–æ–± —Å–∫–∞—Å—É–≤–∞—Ç–∏ –ø—ñ–¥–ø–∏—Å–∫—É –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å\n–Ω–∞üëâ /cancel.".format(message.from_user),
                             reply_markup=keyboard.create_markup(name))
        await RegUser.user_id.set()


@dp.message_handler(state="*", commands=['cancel'])
@dp.message_handler(Text(equals=['üîô_–ù–∞–∑–∞—Ç_'], ignore_case=True), state="*")
async def pass_handler(message: types.Message, state: FSMContext):
    current_state = await state.get_state()
    if current_state is None:
        return

    index = str_container.state_mapping.get(current_state)
    await state.finish()
    if index is not None:
        option = str_container.search_btn[index]
        await message.answer("OK!üëå –≤—Å–µ —Å–∫–∞—Å–æ–≤–∞–Ω–æ.",
                             reply_markup=keyboard.create_search_markup(option["name"], option["name2"], option["url"]))


@dp.message_handler(state=[GetCase.case_pr, GetCase.case_appel,
                           GetCase.case_uz, GetCase.case_vb], content_types=types.ContentTypes.TEXT)
async def case_handler(message: types.Message, state: FSMContext):
    form = ""
    judges = ""
    current_state = await state.get_state()
    index = list(str_container.case_files.keys()).index(current_state)
    await servis.read_json_data(message, form, judges, str_container.case_files[current_state], state, index)


# —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –Ω–∞ message push
@dp.message_handler(state=RegUser.user_id, content_types=types.ContentTypes.TEXT)
async def regUser_handler(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data["user_id"] = message.from_user.id
        name = "/–≤—ñ–¥–º–æ–≤–∞"
        await message.answer("{0.first_name} –Ω–∞–±–µ—Ä—ñ—Ç—å‚å® –ø—Ä—ñ–∑–≤–∏—â–µ —Ç–∞ —ñ–º'—è –∞–±–æ –Ω–æ–º–µ—Ä —Å–ø—Ä–∞–≤–∏ —ñ –≤—ñ–¥–ø—Ä–∞–≤—Ç–µüì•."
                             "\n\n<b>–ü–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è</b>‚ùó \n–ü—Ä—ñ–∑–≤–∏—â–µ —Ç–∞ —ñ–º'—è –Ω–∞–±–∏—Ä–∞—Ç–∏ –º–æ–∂–Ω–∞ –∑ –º–∞–ª–æ—ó –±—É–∫–≤–∏, –∞"
                             " –∞–ø–æ—Å—Ç—Ä–æ—Ñ –≤ —Ç–µ–∫—Å—Ç—ñ "
                             "–∑–∞–º—ñ–Ω—è—î—Ç—å—Å—è –Ω–∞ –ø—Ä–æ–±—ñ–ª.\n\n–©–æ–¥–æ –Ω–æ–º–µ—Ä–∞ —Å–ø—Ä–∞–≤–∏ –Ω–∞–±–∏—Ä–∞—î–º–æ‚å® –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ –¥–æ –∑—Ä–∞–∑–∫—ñ–≤ "
                             "304/555/20 –∞–±–æ 555/20.\n–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –≤–∫–∞–∑—É–π—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æüíØ."
                             "\n\n–ü—ñ—Å–ª—è —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è <b>–ø—ñ–¥–ø–∏—Å–∫–∞ –≤–∏–¥–∞–ª–∏—Ç—å—Å—è</b>üóë."
                             "\n\n–©–æ–± —Å–∫–∞—Å—É–≤–∞—Ç–∏ –ø—ñ–¥–ø–∏—Å–∫—É –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å \n–Ω–∞üëâ /cancel.".format(message.from_user),
                             reply_markup=keyboard.create_markup(name))
        await RegUser.name.set()


@dp.message_handler(state=RegUser.name, content_types=types.ContentTypes.TEXT)
async def regUser2_handler(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data["name"] = message.text
    await servis.sql_add_search_value(state)
    await state.finish()
    await message.answer(
        "{0.first_name} –í–∏ –ø—ñ–¥–ø–∏—Å–∞–ª–∏—Å—èüëç, –æ—á—ñ–∫—É–π—Ç–µ –Ω–∞ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è.".format(message.from_user),
        reply_markup=keyboard.create_main_markup())


@dp.callback_query_handler(text_startswith="callback_")
async def callback_btn(callback_query: types.CallbackQuery):
    await bot.delete_message(chat_id=callback_query.from_user.id, message_id=callback_query.message.message_id)
    index = str_container.callback_mapping.get(callback_query.data)
    if index is not None:
        option = str_container.search_btn[index]
        await callback_query.message.answer(
            "{0.first_name} {1}".format(callback_query.message.from_user, str_container.meeting_date),
            reply_markup=keyboard.create_search_markup(option["name"], option["name2"], option["url"]))
        await callback_query.answer("–†–æ–∑–¥—ñ–ª üìÖ–î–∞—Ç–∞ –∑–∞—Å—ñ–¥–∞–Ω–Ω—è")


if __name__ == "__main__":
    try:
        executor.start_polling(dp, skip_updates=True, on_startup=on_startup)
    except Exception as e:
        print(f"An error occurred while running the program: {e}")
